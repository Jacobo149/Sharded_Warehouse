import pygame
import time
from workload import Workload
from warehouse_Manager import ShardedWarehouseManager

pygame.init()
screen = pygame.display.set_mode((800, 600))
clock = pygame.time.Clock()

def workload_initialization(self):
    # Initialize the workload
    self.manager = ShardedWarehouseManager()
    self.workload = Workload(self.manager)
    self.workload.generate_transactions()

def draw_arrow(start, end):
    pygame.draw.line(screen, (255, 0, 0), start, end, 5)

# Warehouse positions: Here each warehouse is represented by a top-left corner, width, and height
warehouse_positions = {
    1: (100, 200, 100, 50),  # Warehouse 1: (x, y, width, height)
    2: (400, 200, 100, 50),   # Warehouse 2: (x, y, width, height)
    3: (600, 200, 100, 50)   # Warehouse 3: (x, y, width, height)
}

running = True
while running:
    screen.fill((255, 255, 255))
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

    # Draw the warehouses as rectangles
    pygame.draw.rect(screen, (0, 0, 255), warehouse_positions[1])  # Warehouse 1
    pygame.draw.rect(screen, (0, 255, 0), warehouse_positions[2])  # Warehouse 2
    pygame.draw.rect(screen, (255, 0, 0), warehouse_positions[3])  # Warehouse 3

    # Simulate transaction processing (drawing arrows between warehouses)
    draw_arrow((warehouse_positions[1][0] + warehouse_positions[1][2] // 2, warehouse_positions[1][1] + warehouse_positions[1][3] // 2),
               (warehouse_positions[2][0] + warehouse_positions[2][2] // 2, warehouse_positions[2][1] + warehouse_positions[2][3] // 2))

    pygame.display.flip()
    clock.tick(60)  # Update at 60 FPS

    time.sleep(2)  # Simulate time between updates

pygame.quit()
